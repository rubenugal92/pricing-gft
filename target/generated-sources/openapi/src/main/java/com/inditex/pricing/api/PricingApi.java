/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.pricing.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.inditex.pricing.model.PriceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-07T01:05:34.727314+02:00[Europe/Madrid]")
@Validated
@Tag(name = "pricing", description = "Pricing Api")
public interface PricingApi {

    /**
     * GET /api/prices : Get price
     *
     * @param brandId  (required)
     * @param productId  (required)
     * @param date  (required)
     * @return Price found (status code 200)
     *         or Price not found (status code 404)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "getPrice",
        summary = "Get price",
        tags = { "pricing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Price found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Price not found"),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/prices",
        produces = { "application/json" }
    )
    ResponseEntity<PriceResponse> getPrice(
        @NotNull @Parameter(name = "brandId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brandId", required = true) Integer brandId,
        @NotNull @Parameter(name = "productId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = true) Integer productId,
        @NotNull @Parameter(name = "date", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime date
    );

}
